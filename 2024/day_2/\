const std = @import("std");

pub fn main() !void {
    try part_two();
}

fn part_two() !void {
    const file = try std.fs.cwd().openFile("input_test_2.txt", .{});
    defer file.close();

    var buffer: [134]u8 = undefined;
    _ = try file.readAll(&buffer);
    var lines = std.mem.splitScalar(u8, &buffer, '\n');

    var rv: u32 = 0;
    while (lines.next()) |line| {
        var line_split = std.mem.splitScalar(u8, line, ' ');

        var report: std.ArrayList(u32) = std.ArrayList(u32).init(std.heap.page_allocator);
        while (line_split.next()) |num| {
            try report.append(try std.fmt.parseInt(u32, num[0..], 10));
        }

        const is_ok: bool = is_level_ok(report, 0);
        if (is_ok) {
            rv += 1;
        }
    }

    std.debug.print("Result: {d}", .{rv});
}

fn is_level_ok(arr: std.ArrayList(u32), err_count: u32) bool {
    if (err_count > 1) {
        return false;
    }

    var curr: u32 = arr.items[0];
    const diff: i64 = curr - arr.items[1];

    if (@abs(diff) < 1 or @abs(diff) > 3) {
        return is_level_ok(create_sublist(arr, 0), 1) or is_level_ok(create_sublist(arr, 1), 1);
    }

    for (1..arr.items.len - 1) |i| {
        const next = arr.items[i];
        const curr_diff = curr - next;

        if ((curr_diff < 0 and diff > 0) or (curr_diff > 0 and diff < 0)) {
            return is_level_ok(create_sublist(arr, i), 1) or is_level_ok(create_sublist(arr, i + 1), 1);
        } else if (@abs(curr_diff) > 3 or @abs(curr_diff) < 1) {
            return is_level_ok(create_sublist(arr, i), 1) or is_level_ok(create_sublist(arr, i + 1), 1);
        }

        curr = next;
    }
}

fn create_sublist(arr: std.ArrayList(u32), idx_to_skip: usize) std.ArrayList(u32) {
    var rv: std.ArrayList(u32) = std.ArrayList(u32).init(std.heap.page_allocator);
    for (0..arr.items.len) |i| {
        if (i == idx_to_skip) {
            continue;
        }

        try rv.append(arr.items[i]);
    }

    return &rv;
}

fn part_one() !void {
    const file = try std.fs.cwd().openFile("input.txt", .{});
    defer file.close();

    var buffer: [60]u8 = undefined;
    _ = try file.readAll(&buffer);
    var lines = std.mem.splitScalar(u8, &buffer, '\n');

    var rv: u32 = 0;
    outer: while (lines.next()) |report| {
        if (report.len < 1) {
            break;
        }

        var levels = std.mem.splitScalar(u8, report[0..], ' ');
        std.debug.print("{s}\n", .{levels.buffer});

        const first: u32 = try std.fmt.parseInt(u32, levels.next().?, 10);
        const second: u32 = try std.fmt.parseInt(u32, levels.next().?, 10);
        std.debug.print("Comparing {d} and {d}\n", .{ first, second });

        const diff: i64 = @as(i64, first) - @as(i64, second);
        if (@abs(diff) < 1 or @abs(diff) > 3) {
            continue;
        }

        var prev: u32 = second;
        while (levels.next()) |level| {
            const curr = try std.fmt.parseInt(u32, level, 10);
            std.debug.print("Comparing {d} and {d}\n", .{ prev, curr });
            const curr_diff: i64 = @as(i64, prev) - @as(i64, curr);

            if ((curr_diff < 0 and diff > 0) or (curr_diff > 0 and diff < 0)) {
                continue :outer;
            } else if (@abs(curr_diff) > 3 or @abs(curr_diff) < 1) {
                std.debug.print("Diff: {d}\n", .{curr_diff});
                continue :outer;
            }

            prev = curr;
        }

        std.debug.print("Report OK\n", .{});
        rv += 1;
    }

    std.debug.print("Result: {d}", .{rv});
}
